<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hawk&#39;s Notes</title>
    <link>https://hawkinchina.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>记录平时学习阅读笔记以及搜集到的好的文章</description>
    <pubDate>Tue, 31 Dec 2024 06:11:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>cheat命令</title>
      <link>https://hawkinchina.github.io/2024/12/31/cheat%E5%91%BD%E4%BB%A4/</link>
      <guid>https://hawkinchina.github.io/2024/12/31/cheat%E5%91%BD%E4%BB%A4/</guid>
      <pubDate>Tue, 31 Dec 2024 06:07:39 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;1-cheat命令&quot;&gt;&lt;a href=&quot;#1-cheat命令&quot; class=&quot;headerlink&quot; title=&quot;1. cheat命令&quot;&gt;&lt;/a&gt;1. cheat命令&lt;/h1&gt;&lt;p&gt;cheat命令怎么安装和使用&lt;/p&gt;
&lt;figure class=&quot;highli
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="1-cheat命令"><a href="#1-cheat命令" class="headerlink" title="1. cheat命令"></a>1. cheat命令</h1><p>cheat命令怎么安装和使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install cheat</span><br></pre></td></tr></table></figure><p><img src="/vx_images/490430796847025.png" alt=""></p><p>cheat命令简单来说，就是告诉你一个命令如何使用。它没有提供其他额外多余的信息，只通过使用实例告诉你一个命令如何使用。</p><p><img src="/vx_images/123441393845998.png" alt=""></p><h2 id="1-1-查看哪些命令可以用cheat"><a href="#1-1-查看哪些命令可以用cheat" class="headerlink" title="1.1. 查看哪些命令可以用cheat"></a>1.1. 查看哪些命令可以用cheat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cheat -l | less</span><br></pre></td></tr></table></figure><h2 id="1-2-输出颜色高亮"><a href="#1-2-输出颜色高亮" class="headerlink" title="1.2. 输出颜色高亮"></a>1.2. 输出颜色高亮</h2><p>编辑配置文件： <code>.config/cheat/conf.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># conf.yml:</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Should 'cheat' always colorize output?</span></span><br><span class="line"><span class="attr">colorize:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Which 'chroma' colorscheme should be applied to the output?</span></span><br><span class="line"><span class="comment"># Options are available here:</span></span><br><span class="line"><span class="comment">#   https://github.com/alecthomas/chroma/tree/master/styles</span></span><br><span class="line"><span class="comment"># style: monokai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">style:</span> <span class="string">solarized-dark</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Which 'chroma' "formatter" should be applied?</span></span><br><span class="line"><span class="comment"># One of: "terminal", "terminal256", "terminal16m"</span></span><br><span class="line"><span class="attr">formatter:</span> <span class="string">terminal256</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">cheatpaths:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">github</span>                   <span class="comment"># a name for the cheatpath</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">~/cheat_files/awesome-cheatsheets</span> <span class="comment"># the path's location on the filesystem</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="string">[</span> <span class="string">github</span> <span class="string">]</span>               <span class="comment"># these tags will be applied to all sheets on the path</span></span><br><span class="line"><span class="attr">    readonly:</span> <span class="literal">true</span>                    <span class="comment"># if true, `cheat` will not create new cheatsheets here</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">dev</span>                   <span class="comment"># a name for the cheatpath</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">~/cheat_files/cheatsheets</span> <span class="comment"># the path's location on the filesystem</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="string">[</span> <span class="string">dev</span> <span class="string">]</span>               <span class="comment"># these tags will be applied to all sheets on the path</span></span><br><span class="line"><span class="attr">    readonly:</span> <span class="literal">true</span>                    <span class="comment"># if true, `cheat` will not create new cheatsheets here</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># - name: personal</span></span><br><span class="line">    <span class="comment"># path: ~/documents/cheat/personal  # this is a separate directory and repository than above</span></span><br><span class="line">    <span class="comment"># tags: [ personal ]</span></span><br><span class="line">    <span class="comment"># readonly: false                   # new sheets may be written here</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h2 id="1-3-带tags-查询cheat"><a href="#1-3-带tags-查询cheat" class="headerlink" title="1.3. 带tags 查询cheat"></a>1.3. 带tags 查询cheat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cheat -l -t github  <span class="comment"># 带tag查询</span></span><br><span class="line"></span><br><span class="line">cheat -l -t dev  <span class="comment"># 带tag查询</span></span><br><span class="line"></span><br><span class="line">cheat -l |grep html  <span class="comment"># 过滤查询</span></span><br></pre></td></tr></table></figure><p><img src="/vx_images/166650014289502.png" alt=""></p>]]></content:encoded>
      
      <comments>https://hawkinchina.github.io/2024/12/31/cheat%E5%91%BD%E4%BB%A4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo文件结构</title>
      <link>https://hawkinchina.github.io/2024/12/30/Hexo%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</link>
      <guid>https://hawkinchina.github.io/2024/12/30/Hexo%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</guid>
      <pubDate>Mon, 30 Dec 2024 08:10:43 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;blog文件目录&quot;&gt;&lt;a href=&quot;#blog文件目录&quot; class=&quot;headerlink&quot; title=&quot;blog文件目录&quot;&gt;&lt;/a&gt;blog文件目录&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|-- _config.yml  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- package.json  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- scaffolds  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- source  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- _posts  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- public  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- themes  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- .gitignore&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="blog文件目录"><a href="#blog文件目录" class="headerlink" title="blog文件目录"></a>blog文件目录</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- _config.yml  </span><br><span class="line">|-- package.json  </span><br><span class="line">|-- scaffolds  </span><br><span class="line">|-- source  </span><br><span class="line">|-- _posts  </span><br><span class="line">|-- public  </span><br><span class="line">|-- themes  </span><br><span class="line">|-- .gitignore</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>网站的全局配置文件，设置包括网站标题、副标题、作者、关键字和描述信息等，参照<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置|Hexo</a>。</p><h2 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h2><p><code>node_modules</code>存储Hexo需要的其他node.js模块，以后安装的hexo相关模块也放在这里。框架的基本参数信息和它所依赖的插件，在 npm 安装时使用 –save 保存进去。</p><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p><code>package.json</code>用来查看Hexo的版本以及相关依赖包的版本。</p><p>Hexo会默认安装：</p><ul><li>hexo：主程序</li><li>hexo-deployer-git：实现git部署方式</li><li>hexo-generator-archive：存档页面生成器</li><li>hexo-generator-category：分类页面生成器</li><li>hexo-generator-index：index生成器</li><li>hexo-generator-tag：标签页面生成器</li><li>hexo-renderer-ejs：支持EJS渲染</li><li>hexo-renderer-marked：Markdown引擎</li><li>hexo-renderer-stylus：支持stylus渲染，主题需要</li><li>hexo-server：支持本地预览，默认地址 localhost:4000</li></ul><p>新安装的依赖包，也会保存在<code>node_module</code>文件夹下。</p><h2 id="scaffold"><a href="#scaffold" class="headerlink" title="scaffold"></a>scaffold</h2><p>本意是 “脚手架” 的意思，这里引申为模板文件夹，包含<code>page</code>，<code>post</code>，<code>draft</code>三种模板，分别对应 页面、要发布的文章、草稿。当你 <code>hexo new &lt;layout(布局)&gt; &lt;title&gt;</code>的时候，Hexo 会根据该文件夹下的对应文件进行初始化构建。</p><h2 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h2><p>主题文件夹，存储主题。每一个主题，都有一个单独的文件夹。默认主题为<code>landscape</code>，其它主题可以在 Github 上免费下载使用。</p><p>这里值得注意的是，Hexo配置文件中的<code>language**参数**</code>的值，取决于每个主题文件夹（如landscape）下的<code>language**文件夹**</code>里的文件名。</p><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>source：资源文件夹。存储直接来自用户的文件, 用来存放图片、Markdown文档（文章、草稿）、各种页面（分类、关于页面等）。</p><ul><li>source/_posts ：默认source文件夹下只有一个_post文件夹，存放文章的markdown源文件，_posts 目录下的md文件，会被编译成 html 文件，放到 public 文件夹下。每个页面有一个以该页面命名的文件夹，也存放在source文件夹下。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</li><li>source/_discarded:删除的博客存放在这里。</li><li>source/categories: 分类文件夹，有index.md文件，由<code>hexo new page categories</code>生成。</li><li>source/tags: 由<code>hexo new page tags</code>生成的标签文件夹，内自动生成index.md</li></ul><h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><p>public文件夹是<code>hexo g</code> 编译生成静态文件后自动生成的。将source文件夹里的Markdown文档，转换成index.html。再结合主题进行渲染成我们最终看到的博客。<br><code>hexo clean</code>会清除 db.json 和 public 文件夹下的所有文件。</p><h2 id="deploy-git"><a href="#deploy-git" class="headerlink" title="deploy_git"></a>deploy_git</h2><p>.deploy_git：将public文件夹的内容提交到Github后生成，内容与public文件夹基本一致, 本人还没试过。</p><p>关系大致是：source -&gt; public -&gt; .deploy_git</p><p>执行<code>hexo generate</code>，根据source，更新 public。<br>执行<code>hexo deploy</code>，根据public，更新 .deploy_git。</p>]]></content:encoded>
      
      <comments>https://hawkinchina.github.io/2024/12/30/Hexo%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>QEMU-仿真模拟STM32F103开发版</title>
      <link>https://hawkinchina.github.io/2024/12/30/stm32/QEMU-%E4%BB%BF%E7%9C%9F%E6%A8%A1%E6%8B%9FSTM32F103%E5%BC%80%E5%8F%91%E6%9D%BF/</link>
      <guid>https://hawkinchina.github.io/2024/12/30/stm32/QEMU-%E4%BB%BF%E7%9C%9F%E6%A8%A1%E6%8B%9FSTM32F103%E5%BC%80%E5%8F%91%E6%9D%BF/</guid>
      <pubDate>Mon, 30 Dec 2024 07:07:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;1-QEMU-仿真模拟-STM32F103-开发板&quot;&gt;&lt;a href=&quot;#1-QEMU-仿真模拟-STM32F103-开发板&quot; class=&quot;headerlink&quot; title=&quot;1. QEMU-仿真模拟 STM32F103 开发板&quot;&gt;&lt;/a&gt;1. QEMU-仿真模拟 STM32F103 开发板&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/asmer/p/16813129.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/asmer/p/16813129.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;QEMU 是一款开源虚拟机, 可以用来模拟各种系统开发板, 当然也可以用来模拟 stm32 的开发板&lt;/p&gt;
&lt;p&gt;QEMU 官方说明文档在此 &lt;a href=&quot;https://www.qemu.org/docs/master/system/arm/stm32.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.qemu.org/docs/master/system/arm/stm32.html&lt;/a&gt;&lt;br&gt;不过我们使用的并不是官方的版本, 而是别人魔改的一个版本, 用 QEMU 模拟 STM32 这事很多人干过,&lt;/p&gt;
&lt;h2 id=&quot;1-1-安装&quot;&gt;&lt;a href=&quot;#1-1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.1. 安装&quot;&gt;&lt;/a&gt;1.1. 安装&lt;/h2&gt;&lt;p&gt;代码地址：&lt;br&gt;&lt;a href=&quot;https://xpack.github.io/qemu-arm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xpack.github.io/qemu-arm/&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="1-QEMU-仿真模拟-STM32F103-开发板"><a href="#1-QEMU-仿真模拟-STM32F103-开发板" class="headerlink" title="1. QEMU-仿真模拟 STM32F103 开发板"></a>1. QEMU-仿真模拟 STM32F103 开发板</h1><p><a href="https://www.cnblogs.com/asmer/p/16813129.html" target="_blank" rel="noopener">https://www.cnblogs.com/asmer/p/16813129.html</a></p><p>QEMU 是一款开源虚拟机, 可以用来模拟各种系统开发板, 当然也可以用来模拟 stm32 的开发板</p><p>QEMU 官方说明文档在此 <a href="https://www.qemu.org/docs/master/system/arm/stm32.html" target="_blank" rel="noopener">https://www.qemu.org/docs/master/system/arm/stm32.html</a><br>不过我们使用的并不是官方的版本, 而是别人魔改的一个版本, 用 QEMU 模拟 STM32 这事很多人干过,</p><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1. 安装"></a>1.1. 安装</h2><p>代码地址：<br><a href="https://xpack.github.io/qemu-arm/" target="_blank" rel="noopener">https://xpack.github.io/qemu-arm/</a></p><a id="more"></a><p>下载地址：</p><p><a href="https://github.com/xpack-dev-tools/qemu-arm-xpack/releases/tag/v8.2.6-1" target="_blank" rel="noopener">https://github.com/xpack-dev-tools/qemu-arm-xpack/releases/tag/v8.2.6-1</a></p><p><img src="/vx_images/349941778827798.png" alt=""></p><p><img src="/vx_images/596993010921938.png" alt=""></p><p><img src="/vx_images/553591706543478.png" alt=""></p><p><img src="/vx_images/79902917669314.png" alt=""></p><p><img src="/vx_images/29612220143268.png" alt=""></p><p>因为兼容性问题, 后期可能还会再维护一段时间, 如果下载的文件没有这个版本, 大概率说明这个版本已经撤销了, 文章关了, 可以退出了…</p><p>这里模拟的开发板是 STM32-Bluepill(STM32F103), 也就是淘宝拼多多上销量最高的那款, 似乎都有些修改, 不过都是大同小异.</p><p><img src="/vx_images/292721968957612.png" alt=""></p><h2 id="1-2-使用方式"><a href="#1-2-使用方式" class="headerlink" title="1.2. 使用方式"></a>1.2. 使用方式</h2><p>到 qemu-system-gnuarmeclipse 所在的文件夹, 打开命令行或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-gnuarmeclipse --board BluePill --image 你的stm32程序文件路径.elf</span><br></pre></td></tr></table></figure><p>主要用到两个参数, <code>--board</code> 是设置开发板类型, <code>--image</code> 是设置 elf 程序文件. 需要注意这两个命令 官方的 QEMU 都是不支持的.  </p><p><img src="/vx_images/530876796798076.png" alt=""></p><p>我这里烧录的程序是控制 PC13 亮灭的, BluePill 开发板 PC13 连的是一个 led 灯. 代码是用 arm-none-eabi-gcc 编译的.</p><p>工程代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_PERIPH ((uint32_t)0x00000010)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_PORT ((GPIO_TypeDef *) GPIOC_BASE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_PIN GPIO_Pin_13</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++)</span><br><span class="line">            __NOP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPIO_InitTypeDef gpioDef;</span><br><span class="line">    RCC_APB2PeriphClockCmd(LED_PERIPH, ENABLE);</span><br><span class="line">    gpioDef.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    gpioDef.GPIO_Pin = LED_PIN;</span><br><span class="line">    gpioDef.GPIO_Speed = GPIO_Speed_10MHz;</span><br><span class="line">    GPIO_Init(LED_PORT, &amp;gpioDef);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        GPIO_WriteBit(LED_PORT, LED_PIN, (BitAction)!GPIO_ReadInputDataBit(LED_PORT, LED_PIN));</span><br><span class="line">        delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行效果如图所示:</p><p><img src="/vx_images/328303364569854.png" alt=""></p><p>软件还做了点动画效果, 这个灯确实能一闪一闪的</p><p><img src="/vx_images/157983952772256.png" alt=""></p><h2 id="1-3-GDB-调试"><a href="#1-3-GDB-调试" class="headerlink" title="1.3. GDB 调试"></a>1.3. GDB 调试</h2><p>如果需要使用 GDB 调试的话需要添加两个参数 -S -s</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-gnuarmeclipse -S -s --board BluePill --image 你的stm32程序文件路径.elf</span><br></pre></td></tr></table></figure><p>之后启动 GDB 连接 <code>1234</code> 这个端口, 然后设置文件.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar remote localhost:<span class="number">1234</span></span><br><span class="line"><span class="keyword">file</span> 你的stm32程序文件路径.elf</span><br></pre></td></tr></table></figure><p><img src="/vx_images/573713585377020.png" alt=""><br>之后就可以愉快的进行调试了.</p><h2 id="1-4-使用-VScode-调试"><a href="#1-4-使用-VScode-调试" class="headerlink" title="1.4. 使用 VScode 调试"></a>1.4. 使用 VScode 调试</h2><p>GDB 命令行使用不方便的话也可以用 VScode 的机制进行调试, 实际上也是使用的 GDB, 只不过是有了图形界面会方便点.<br>添加 json 调试配置文件.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"stm32调试"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/build/Debug/$&#123;workspaceFolderBasename&#125;.elf"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>,</span><br><span class="line">            // 这里是我的 gdb 路径 </span><br><span class="line">            "miDebuggerPath": "C:/Users/Qu/.eide/tools/gcc_arm/bin/arm-none-eabi-gdb.exe",</span><br><span class="line">            "miDebuggerServerAddress": "localhost:1234",</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/vx_images/385223513135446.png" alt=""></p><h1 id="2-下载stm32-p103这个板子的各种demo程序"><a href="#2-下载stm32-p103这个板子的各种demo程序" class="headerlink" title="2. 下载stm32-p103这个板子的各种demo程序"></a>2. 下载stm32-p103这个板子的各种demo程序</h1><p><code>去github下载stm32-p103这个板子的各种demo程序</code>，<a href="https://github.com/beckus/stm32_p103_demos" target="_blank" rel="noopener">https://github.com/beckus/stm32_p103_demos</a> （对了顺便说一下，这个的qume的串口输出不到控制台，原作者自己也说了不知道为什么，而且多个博客也看到有人说printf无效的。想输出到控制台，可以看我别的qemu文章，你一定会有收获的）</p><h1 id="3-STM32-Blue-Pill-—-Unit-Testing-with-Qemu-Blue-Pill-Emulator"><a href="#3-STM32-Blue-Pill-—-Unit-Testing-with-Qemu-Blue-Pill-Emulator" class="headerlink" title="3. STM32 Blue Pill — Unit Testing with Qemu Blue Pill Emulator"></a>3. STM32 Blue Pill — Unit Testing with Qemu Blue Pill Emulator</h1><p>STM32 Blue Pill — Unit Testing with Qemu Blue Pill Emulator</p><h1 id="4-STM32-Blue-Pill三路USB转串口适配器固件指南"><a href="#4-STM32-Blue-Pill三路USB转串口适配器固件指南" class="headerlink" title="4. STM32 Blue Pill三路USB转串口适配器固件指南"></a>4. STM32 Blue Pill三路USB转串口适配器固件指南</h1><p>旨在为STM32F103C8T6“蓝药片”最小开发板提供一个三合一的USB转串口适配器固件。</p><p>bluepill-serial-monster is a firmware for STM32 Blue Pill that turns it into a 3 Port USB-to-Serial adapter. The firmware implements a USB 2.0 full-speed composite device that consists of 3 USB CDC devices.</p><h2 id="4-1-Features"><a href="#4-1-Features" class="headerlink" title="4.1. Features"></a>4.1. Features</h2><p><a href="https://github.com/r2axz/bluepill-serial-monster#features" target="_blank" rel="noopener">github</a></p><ul><li>3 independent <em>UART</em> ports;</li><li>Hardware flow control (<strong>RTS</strong>/<strong>CTS</strong>) support1;</li><li><strong>DSR</strong>/<strong>DTR</strong>/<strong>DCD</strong>/<strong>RI</strong> signals support;</li><li>7 or 8 bit word length;</li><li>None, even, odd parity;</li><li>1, 1.5, and 2 stop bits;</li><li>Works with <em>CDC Class</em> drives on <em>Linux</em>, <em>macOS</em>, and <em>Windows</em>;</li><li>Supports all baud rates up to 2 MBaud;</li><li><strong>TXA</strong> signal for controlling RS-485 transceivers (<strong>DE</strong>, <strong>/RE</strong>);</li><li><em>DMA</em> <em>RX</em>/<em>TX</em> for high-speed communications;</li><li><em>IDLE line</em> detection for short response time;</li><li>Signed <em>INF</em> driver for <em>Windows XP, 7, and 8</em>;</li><li>Built-in command shell for device parameters configuration;</li><li>No external dependencies other than <em>CMSIS</em>;</li><li>DFU Bootloaders Compartible (see the <em>FIRMWARE_ORIGIN</em> option);</li></ul><p>(1) <em>UART1</em> does not support <em>CTS</em> because it is occupied by USB (<em>PA11</em>) and cannot be remapped. <em>RTS</em> can still be used.</p><p><img src="/vx_images/360345315289385.png" alt=""></p><h1 id="5-qemu的详细资料大全（入门必看！！！）"><a href="#5-qemu的详细资料大全（入门必看！！！）" class="headerlink" title="5. qemu的详细资料大全（入门必看！！！）"></a>5. qemu的详细资料大全（入门必看！！！）</h1><p><a href="https://blog.csdn.net/kangkanglhb88008/article/details/126299695" target="_blank" rel="noopener">https://blog.csdn.net/kangkanglhb88008/article/details/126299695</a></p><p><a href="https://xpack.github.io/dev-tools/qemu-arm/options/" target="_blank" rel="noopener">https://xpack.github.io/dev-tools/qemu-arm/options/</a></p><ul><li>qemu printf问题</li></ul><p><img src="/vx_images/188060312289384.png" alt=""></p><ul><li>这儿讲了这个<code>qemu-system-gnuarmeclipse.exe</code>命令行选项的详细使用 （是qemu官方版选项的子集，针对stm32有些特定的选项了）<code>The GNU MCU Eclipse QEMU command line options | The xPack Build Framework</code></li></ul>]]></content:encoded>
      
      <comments>https://hawkinchina.github.io/2024/12/30/stm32/QEMU-%E4%BB%BF%E7%9C%9F%E6%A8%A1%E6%8B%9FSTM32F103%E5%BC%80%E5%8F%91%E6%9D%BF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hexo是怎么工作的</title>
      <link>https://hawkinchina.github.io/2024/12/30/hexo%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84/</link>
      <guid>https://hawkinchina.github.io/2024/12/30/hexo%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84/</guid>
      <pubDate>Mon, 30 Dec 2024 04:45:11 GMT</pubDate>
      <description>
      
        &lt;p&gt;你可能用过hexo(或者jekyll)来搭建自己的博客网站。通常我们在安装、配置完成hexo之后，借助hexo，一般通过以下步骤，就可以完成一篇博客的编写及发布，真是方便极了：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; hexo init           // 创建一个新的hexo项目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; hexo new mynewblog  // 新建一篇标题为mynewblog的文章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; hexo server         // 为hexo在本地起一个http server, 然后通过浏览器访问博客&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; hexo generate       // 生成将要发布的博客网站包含html在内的静态资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; hexo deploy         // 将generate的结果发布到_config.yml中指定的仓库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可是，从hexo init到hexo deploy中间发生了什么呢？为了搞清楚这一过程、理解hexo的工作原理，本文将试着回答以下问题:&lt;/p&gt;
&lt;p&gt;• 命令行中的hexo是什么&lt;br&gt;• hexo是怎么将我们写好的markdown转换成html的&lt;br&gt;• hexo插件是如何工作的&lt;br&gt;• 本地的hexo项目和git page有什么关系&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>你可能用过hexo(或者jekyll)来搭建自己的博客网站。通常我们在安装、配置完成hexo之后，借助hexo，一般通过以下步骤，就可以完成一篇博客的编写及发布，真是方便极了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init           // 创建一个新的hexo项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new mynewblog  // 新建一篇标题为mynewblog的文章</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server         // 为hexo在本地起一个http server, 然后通过浏览器访问博客</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo generate       // 生成将要发布的博客网站包含html在内的静态资源</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy         // 将generate的结果发布到_config.yml中指定的仓库</span></span><br></pre></td></tr></table></figure><p>可是，从hexo init到hexo deploy中间发生了什么呢？为了搞清楚这一过程、理解hexo的工作原理，本文将试着回答以下问题:</p><p>• 命令行中的hexo是什么<br>• hexo是怎么将我们写好的markdown转换成html的<br>• hexo插件是如何工作的<br>• 本地的hexo项目和git page有什么关系</p><a id="more"></a><p>具体详细见：</p><p><a href="https://buildall.github.io/2017/08/20/howhexoworks/" target="_blank" rel="noopener">https://buildall.github.io/2017/08/20/howhexoworks/</a></p>]]></content:encoded>
      
      <comments>https://hawkinchina.github.io/2024/12/30/hexo%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo NexT 主题使用 utterances 搭建评论系统</title>
      <link>https://hawkinchina.github.io/2024/12/29/Hexo-NexT-%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8-utterances-%E6%90%AD%E5%BB%BA%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link>
      <guid>https://hawkinchina.github.io/2024/12/29/Hexo-NexT-%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8-utterances-%E6%90%AD%E5%BB%BA%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid>
      <pubDate>Sun, 29 Dec 2024 09:49:58 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;在-Hexo-NexT-中使用&quot;&gt;&lt;a href=&quot;#在-Hexo-NexT-中使用&quot; class=&quot;headerlink&quot; title=&quot;在 Hexo NexT 中使用&quot;&gt;&lt;/a&gt;在 Hexo NexT 中使用&lt;/h1&gt;&lt;p&gt;在 Hexo NexT 中使用我的 NexT 版本是 5.1.4，不知道最新的版本有没有集成 utterances ，&lt;br&gt;如果有一般在主题配置文件中添加相关 utterances 配置即可。&lt;br&gt;但我使用 5.1.4 版本没有集成，需要修改NexT的布局文件，不然单添加配置不会在页面中看到效果的。&lt;/p&gt;
&lt;p&gt;几个重要步骤：&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="在-Hexo-NexT-中使用"><a href="#在-Hexo-NexT-中使用" class="headerlink" title="在 Hexo NexT 中使用"></a>在 Hexo NexT 中使用</h1><p>在 Hexo NexT 中使用我的 NexT 版本是 5.1.4，不知道最新的版本有没有集成 utterances ，<br>如果有一般在主题配置文件中添加相关 utterances 配置即可。<br>但我使用 5.1.4 版本没有集成，需要修改NexT的布局文件，不然单添加配置不会在页面中看到效果的。</p><p>几个重要步骤：</p><a id="more"></a><h2 id="编辑-Hexo-主题配置文件-config-yml，添加以下配置"><a href="#编辑-Hexo-主题配置文件-config-yml，添加以下配置" class="headerlink" title="编辑 Hexo 主题配置文件 _config.yml，添加以下配置"></a>编辑 Hexo 主题配置文件 _config.yml，添加以下配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整合 utterances 评论</span></span><br><span class="line">utterance:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 仓库名字，格式：[user-name]/[repo-name]，如：lanweihong/utterance_repo</span></span><br><span class="line">  repo: xxx/yyy</span><br><span class="line">  <span class="comment"># 主题</span></span><br><span class="line">  theme: github-light</span><br><span class="line">  <span class="comment"># 映射配置</span></span><br><span class="line">  issue_term: pathname</span><br></pre></td></tr></table></figure><h2 id="在主题的-layout-third-party-comments-目录中添加-utterance-swig文件："><a href="#在主题的-layout-third-party-comments-目录中添加-utterance-swig文件：" class="headerlink" title="在主题的 layout/_third-party/comments 目录中添加 utterance.swig文件："></a>在主题的 layout/_third-party/comments 目录中添加 utterance.swig文件：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.utterance and theme.utterance.enable %&#125;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;!function()&#123;var e=document.createElement(&quot;script&quot;);e.type=&quot;text/javascript&quot;,e.async=!0,e.setAttribute(&quot;issue-term&quot;,&quot;&#123;&#123; theme.utterance.issue_term &#125;&#125;&quot;),e.setAttribute(&quot;theme&quot;,&quot;&#123;&#123; theme.utterance.theme &#125;&#125;&quot;),e.setAttribute(&quot;repo&quot;,&quot;&#123;&#123; theme.utterance.repo &#125;&#125;&quot;),e.crossorigin=&quot;anonymous&quot;,e.src=&quot;https://utteranc.es/client.js&quot;,document.getElementById(&quot;utterance-container&quot;).appendChild(e)&#125;()&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="编辑-layout-third-party-comments-index-swig，添加以下配置加入-utterance-swig-文件："><a href="#编辑-layout-third-party-comments-index-swig，添加以下配置加入-utterance-swig-文件：" class="headerlink" title="编辑 layout/_third-party/comments/index.swig，添加以下配置加入 utterance.swig 文件："></a>编辑 layout/_third-party/comments/index.swig，添加以下配置加入 utterance.swig 文件：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;utterance.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><h2 id="编辑-layout-partials-comments-swig-文件，在最后加入以下内容，配置存放评论的-dom-元素："><a href="#编辑-layout-partials-comments-swig-文件，在最后加入以下内容，配置存放评论的-dom-元素：" class="headerlink" title="编辑 layout/_partials/comments.swig 文件，在最后加入以下内容，配置存放评论的 dom 元素："></a>编辑 layout/_partials/comments.swig 文件，在最后加入以下内容，配置存放评论的 dom 元素：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.utterance.enable %&#125;</span><br><span class="line"> &lt;div class=&quot;comments&quot; id=&quot;comments&quot;&gt;</span><br><span class="line">   &lt;div id=&quot;utterance-container&quot;&gt;&lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>参考： <a href="https://blog.lanweihong.com/posts/24011/" target="_blank" rel="noopener">https://blog.lanweihong.com/posts/24011/</a></p>]]></content:encoded>
      
      <comments>https://hawkinchina.github.io/2024/12/29/Hexo-NexT-%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8-utterances-%E6%90%AD%E5%BB%BA%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
